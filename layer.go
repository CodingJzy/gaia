package gaia

import "fmt"
import "github.com/aporeto-inc/elemental"

import "github.com/aporeto-inc/gaia/enum"

// LayerIdentity represents the Identity of the object
var LayerIdentity = elemental.Identity{
	Name:     "layer",
	Category: "layers",
}

// LayersList represents a list of Layers
type LayersList []*Layer

// Layer represents the model of a layer
type Layer struct {
	// ID is the identifier of the object.
	ID string `json:"ID" cql:"-"`

	// Name is the name of the entity
	Name string `json:"name" cql:"name,primarykey,omitempty"`

	// NamespaceName is the name of the namespace
	NamespaceName string `json:"namespaceName" cql:"namespacename,omitempty"`

	// ParentName is the name of parent layer
	ParentName string `json:"parentName" cql:"parentname,omitempty"`

	// Severity defines the severity level of the vulnerability
	Severity enum.SeverityLevel `json:"severity" cql:"severity,omitempty"`

	// Vulnerabilities is the list of all the vulnerabilities of a layer
	Vulnerabilities []Vulnerability `json:"vulnerabilities" cql:"vulnerabilities,omitempty"`
}

// NewLayer returns a new *Layer
func NewLayer() *Layer {

	return &Layer{}
}

// Identity returns the Identity of the object.
func (o *Layer) Identity() elemental.Identity {

	return LayerIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Layer) Identifier() string {

	return o.ID
}

func (o *Layer) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Layer) SetIdentifier(ID string) {

	o.ID = ID
}

// Validate valides the current information stored into the structure.
func (o *Layer) Validate() elemental.Errors {

	errors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (o Layer) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	return LayerAttributesMap[name]
}

// LayerAttributesMap represents the map of attribute for Layer.
var LayerAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "string",
		Unique:         true,
	},
	"Name": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		CreationOnly:   true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "name",
		Orderable:      true,
		PrimaryKey:     true,
		Required:       true,
		Stored:         true,
		Type:           "string",
		Unique:         true,
	},
	"NamespaceName": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		CreationOnly:   true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "namespaceName",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ParentName": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		CreationOnly:   true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "parentName",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Severity": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		CreationOnly:   true,
		Exposed:        true,
		Name:           "severity",
		ReadOnly:       true,
		Required:       true,
		Stored:         true,
		SubType:        "severity_level",
		Type:           "external",
	},
	"Vulnerabilities": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		CreationOnly:   true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "vulnerabilities",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		SubType:        "vulnerabilities",
		Type:           "external",
	},
}
