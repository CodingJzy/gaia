package gaia

import "fmt"
import "github.com/aporeto-inc/elemental"

import "github.com/aporeto-inc/gaia/golang/constants"

// VulnerabilityIdentity represents the Identity of the object
var VulnerabilityIdentity = elemental.Identity{
	Name:     "vulnerability",
	Category: "vulnerabilities",
}

// VulnerabilitiesList represents a list of Vulnerabilities
type VulnerabilitiesList []*Vulnerability

// Vulnerability represents the model of a vulnerability
type Vulnerability struct {
	// ID is the identifier of the object.
	ID string `json:"ID" cql:"-"`

	// Description is the description of the object.
	Description string `json:"description" cql:"description,omitempty"`

	// Severity refers to the security vulnerability level
	Level constants.Vulnerability `json:"level" cql:"level,omitempty"`

	// Link is the URL that refers to the vulnerability
	Link string `json:"link" cql:"link,omitempty"`

	// Name is the name of the entity
	Name string `json:"name" cql:"name,omitempty"`

	// NamespaceName is the name of the namespace
	NamespaceName string `json:"namespaceName" cql:"namespacename,omitempty"`
}

// NewVulnerability returns a new *Vulnerability
func NewVulnerability() *Vulnerability {

	return &Vulnerability{}
}

// Identity returns the Identity of the object.
func (o *Vulnerability) Identity() elemental.Identity {

	return VulnerabilityIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Vulnerability) Identifier() string {

	return o.ID
}

func (o *Vulnerability) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Vulnerability) SetIdentifier(ID string) {

	o.ID = ID
}

// GetName returns the name of the receiver
func (o *Vulnerability) GetName() string {
	return o.Name
}

// SetName set the given name of the receiver
func (o *Vulnerability) SetName(name string) {
	o.Name = name
}

// Validate valides the current information stored into the structure.
func (o *Vulnerability) Validate() elemental.Errors {

	errors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (o Vulnerability) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	return VulnerabilityAttributesMap[name]
}

// VulnerabilityAttributesMap represents the map of attribute for Vulnerability.
var VulnerabilityAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "string",
		Unique:         true,
	},
	"Description": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "description",
		Orderable:      true,
		Stored:         true,
		Type:           "string",
	},
	"Level": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		CreationOnly:   true,
		Exposed:        true,
		Name:           "level",
		ReadOnly:       true,
		Required:       true,
		Stored:         true,
		SubType:        "vulnerability_level",
		Type:           "external",
	},
	"Link": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		CreationOnly:   true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "link",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Name": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Getter:         true,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
		Unique:         true,
	},
	"NamespaceName": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		CreationOnly:   true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "namespaceName",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
}
