package gaia

import "fmt"
import "github.com/aporeto-inc/elemental"

// HealthReportStatusValue represents the possible values for attribute "status".
type HealthReportStatusValue string

const (
	// HealthReportStatusDegraded represents the value Degraded.
	HealthReportStatusDegraded HealthReportStatusValue = "Degraded"

	// HealthReportStatusFailure represents the value Failure.
	HealthReportStatusFailure HealthReportStatusValue = "Failure"

	// HealthReportStatusOk represents the value Ok.
	HealthReportStatusOk HealthReportStatusValue = "Ok"
)

// HealthReportIdentity represents the Identity of the object
var HealthReportIdentity = elemental.Identity{
	Name:     "healthreport",
	Category: "healthreports",
}

// HealthReportsList represents a list of HealthReports
type HealthReportsList []*HealthReport

// HealthReport represents the model of a healthreport
type HealthReport struct {
	// APIVersion is the API version served by the server.
	APIVersion string `json:"APIVersion" cql:"-"`

	// ID is the identifier of the object.
	ID string `json:"ID" cql:"-"`

	// BahamutVersion is the version of Bahamut used by the server.
	BahamutVersion string `json:"bahamutVersion" cql:"-"`

	// ElementalVersion is the version of Elemental used by the server.
	ElementalVersion string `json:"elementalVersion" cql:"-"`

	// GaiaVersion is the version of Gaia used by the server.
	GaiaVersion string `json:"gaiaVersion" cql:"-"`

	// ManipulateVersion is the version of Manipulate used by the server.
	ManipulateVersion string `json:"manipulateVersion" cql:"manipulateversion,omitempty"`

	// MidgardURL contains the url to use to obtain a token.
	MidgardURL string `json:"midgardURL" cql:"midgardurl,omitempty"`

	// SquallVersion is the version of server.
	SquallVersion string `json:"squallVersion" cql:"-"`

	// Status is the overall health status of the server.
	Status HealthReportStatusValue `json:"status" cql:"-"`
}

// NewHealthReport returns a new *HealthReport
func NewHealthReport() *HealthReport {

	return &HealthReport{}
}

// Identity returns the Identity of the object.
func (o *HealthReport) Identity() elemental.Identity {

	return HealthReportIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *HealthReport) Identifier() string {

	return o.ID
}

func (o *HealthReport) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *HealthReport) SetIdentifier(ID string) {

	o.ID = ID
}

// Validate valides the current information stored into the structure.
func (o *HealthReport) Validate() elemental.Errors {

	errors := elemental.Errors{}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Degraded", "Failure", "Ok"}, true); err != nil {
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (o HealthReport) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	return HealthReportAttributesMap[name]
}

// HealthReportAttributesMap represents the map of attribute for HealthReport.
var HealthReportAttributesMap = map[string]elemental.AttributeSpecification{
	"APIVersion": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "APIVersion",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "string",
	},
	"ID": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "string",
		Unique:         true,
	},
	"BahamutVersion": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "bahamutVersion",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "string",
	},
	"ElementalVersion": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "elementalVersion",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "string",
	},
	"GaiaVersion": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "gaiaVersion",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "string",
	},
	"ManipulateVersion": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "manipulateVersion",
		Orderable:      true,
		Stored:         true,
		Type:           "string",
	},
	"MidgardURL": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "midgardURL",
		Orderable:      true,
		Stored:         true,
		Type:           "string",
	},
	"SquallVersion": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "squallVersion",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "string",
	},
	"Status": elemental.AttributeSpecification{
		AllowedChoices: []string{"Degraded", "Failure", "Ok"},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Name:           "status",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "enum",
	},
}
