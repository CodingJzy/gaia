package gaia

import "fmt"
import "github.com/aporeto-inc/elemental"

// RenderedDependencyMapViewIdentity represents the Identity of the object
var RenderedDependencyMapViewIdentity = elemental.Identity{
	Name:     "rendereddependencymapview",
	Category: "rendereddependencymapviews",
}

// RenderedDependencyMapViewsList represents a list of RenderedDependencyMapViews
type RenderedDependencyMapViewsList []*RenderedDependencyMapView

// RenderedDependencyMapView represents the model of a rendereddependencymapview
type RenderedDependencyMapView struct {
	// ID is the identifier of the object.
	ID string `json:"ID" cql:"-"`
}

// NewRenderedDependencyMapView returns a new *RenderedDependencyMapView
func NewRenderedDependencyMapView() *RenderedDependencyMapView {

	return &RenderedDependencyMapView{}
}

// Identity returns the Identity of the object.
func (o *RenderedDependencyMapView) Identity() elemental.Identity {

	return RenderedDependencyMapViewIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *RenderedDependencyMapView) Identifier() string {

	return o.ID
}

func (o *RenderedDependencyMapView) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *RenderedDependencyMapView) SetIdentifier(ID string) {

	o.ID = ID
}

// Validate valides the current information stored into the structure.
func (o *RenderedDependencyMapView) Validate() elemental.Errors {

	errors := elemental.Errors{}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (o RenderedDependencyMapView) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	return RenderedDependencyMapViewAttributesMap[name]
}

// RenderedDependencyMapViewAttributesMap represents the map of attribute for RenderedDependencyMapView.
var RenderedDependencyMapViewAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "string",
		Unique:         true,
	},
}
