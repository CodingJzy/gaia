package gaia

import "fmt"
import "github.com/aporeto-inc/elemental"

import "time"

// ActivityOperationValue represents the possible values for attribute "operation".
type ActivityOperationValue string

const (
	// ActivityOperationCreate represents the value Create.
	ActivityOperationCreate ActivityOperationValue = "Create"

	// ActivityOperationDelete represents the value Delete.
	ActivityOperationDelete ActivityOperationValue = "Delete"

	// ActivityOperationUpdate represents the value Update.
	ActivityOperationUpdate ActivityOperationValue = "Update"
)

// ActivityIdentity represents the Identity of the object
var ActivityIdentity = elemental.Identity{
	Name:     "activity",
	Category: "activities",
}

// ActivitiesList represents a list of Activities
type ActivitiesList []*Activity

// Activity represents the model of a activity
type Activity struct {
	// ID is the identifier of the object.
	ID string `json:"ID" cql:"id,primarykey,omitempty" bson:"_id"`

	// Data of the notification.
	Data interface{} `json:"data" cql:"data,omitempty" bson:"data"`

	// Date of the notification.
	Date time.Time `json:"date" cql:"date,omitempty" bson:"date"`

	// Identity of the user who performed the operation.
	Identity string `json:"identity" cql:"identity,omitempty" bson:"identity"`

	// Message of the notification.
	Message string `json:"message" cql:"message,omitempty" bson:"message"`

	// Namespace of the notification.
	Namespace string `json:"namespace" cql:"namespace,omitempty" bson:"namespace"`

	// Operation describe what kind of operation the notification represents.
	Operation ActivityOperationValue `json:"operation" cql:"operation,omitempty" bson:"operation"`
}

// NewActivity returns a new *Activity
func NewActivity() *Activity {

	return &Activity{}
}

// Identity returns the Identity of the object.
func (o *Activity) Identity() elemental.Identity {

	return ActivityIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Activity) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Activity) SetIdentifier(ID string) {

	o.ID = ID
}

func (o *Activity) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// Validate valides the current information stored into the structure.
func (o *Activity) Validate() error {

	errors := elemental.Errors{}

	if err := elemental.ValidateStringInList("operation", string(o.Operation), []string{"Create", "Delete", "Update"}, true); err != nil {
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (Activity) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	return ActivityAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (Activity) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ActivityAttributesMap
}

// ActivityAttributesMap represents the map of attribute for Activity.
var ActivityAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		PrimaryKey:     true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
		Unique:         true,
	},
	"Data": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Description:    `Data of the notification.`,
		Exposed:        true,
		Filterable:     true,
		Name:           "data",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		SubType:        "raw_data",
		Type:           "external",
	},
	"Date": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Description:    `Date of the notification.`,
		Exposed:        true,
		Filterable:     true,
		Name:           "date",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "time",
	},
	"Identity": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Description:    `Identity of the user who performed the operation.`,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "identity",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Message": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `Message of the notification.`,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "message",
		Orderable:      true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Description:    `Namespace of the notification.`,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Operation": elemental.AttributeSpecification{
		AllowedChoices: []string{"Create", "Delete", "Update"},
		Autogenerated:  true,
		Description:    `Operation describe what kind of operation the notification represents.`,
		Exposed:        true,
		Filterable:     true,
		Name:           "operation",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
}
