package squallmodels

import "fmt"
import "github.com/aporeto-inc/elemental"

import "sync"

// TabulateIdentity represents the Identity of the object
var TabulateIdentity = elemental.Identity{
	Name:     "tabulate",
	Category: "tabulate",
}

// TabulatesList represents a list of Tabulates
type TabulatesList []*Tabulate

// ContentIdentity returns the identity of the objects in the list.
func (o TabulatesList) ContentIdentity() elemental.Identity {

	return TabulateIdentity
}

// List converts the object to and elemental.IdentifiablesList.
func (o TabulatesList) List() elemental.IdentifiablesList {

	out := elemental.IdentifiablesList{}
	for _, item := range o {
		out = append(out, item)
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o TabulatesList) DefaultOrder() []string {

	return []string{}
}

// Tabulate represents the model of a tabulate
type Tabulate struct {
	// Data contains the tabulated data.
	Data [][]interface{} `json:"data" bson:"-"`

	ModelVersion float64 `json:"-" bson:"_modelversion"`

	sync.Mutex
}

// NewTabulate returns a new *Tabulate
func NewTabulate() *Tabulate {

	return &Tabulate{
		ModelVersion: 1.0,
		Data:         [][]interface{}{},
	}
}

// Identity returns the Identity of the object.
func (o *Tabulate) Identity() elemental.Identity {

	return TabulateIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Tabulate) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Tabulate) SetIdentifier(ID string) {

}

// Version returns the hardcoded version of the model
func (o *Tabulate) Version() float64 {

	return 1.0
}

// DefaultOrder returns the list of default ordering fields.
func (o *Tabulate) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Tabulate) Doc() string {
	return `Tabulate API allows you to retrieve a custom table view for any identity using any tags you like as columns.`
}

func (o *Tabulate) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// Validate valides the current information stored into the structure.
func (o *Tabulate) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Tabulate) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	return TabulateAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Tabulate) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return TabulateAttributesMap
}

// TabulateAttributesMap represents the map of attribute for Tabulate.
var TabulateAttributesMap = map[string]elemental.AttributeSpecification{
	"Data": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Description:    `Data contains the tabulated data.`,
		Exposed:        true,
		Name:           "data",
		ReadOnly:       true,
		SubType:        "tabulated_data",
		Type:           "external",
	},
}
